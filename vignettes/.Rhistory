# Make sure diagonal entries are still 1
A[cur_row, cur_row] = 1;
}
# Final matrix is average of matrix with its transpose
A = (A + t(A)) / 2;
}
GenerateZ = function(p, n, signal){
# Generate Geneteic Data by Gaussian Graphical Model
#
# Input:
#   p: dimension of each pathway.
#   n: sample size
#   signal: if to generate functional pathway
# Output:
#   data: data.
#   Omega: Precsion Matrix for the whole network.
if (signal){
Omega = sample_pa(n = p, directed = F)
Omega = as.matrix(get.adjacency(Omega))
L = Omega; L[upper.tri(L)] = 0
L = ifelse(L == 1, sample(c(runif(1, -0.4, -0.1), runif(1, 0.1, 0.4)), 1), 0)
Omega = L + t(L) + diag(p)
# make Omega invertible
Omega = FixMatrix(Omega, 2);
all(eigen(Omega)$values > 0);
# generate data
Cov_True = solve(Omega);
data = mvrnorm(n, rep(0, p), Cov_True);
} else {
#data = matrix(runif(n*p, -0.01, 0.01), n, p)
#Cov_True = var(data)
#Omega = solve(Cov_True)
Cov_True = diag(p) * 0.001
data = mvrnorm(n, rep(0, p), Cov_True);
Omega = solve(Cov_True)
}
return(list(data = data, Omega = Omega))
}
calcSigma <- function(X, inv.Sigma) {
# Calculate Covariance Matrix using Gaussian Kernel
Sigma <- matrix(0, nrow(X), nrow(X))
for (i in 1:nrow(Sigma))
for (j in 1:ncol(Sigma))
Sigma[i, j] <- exp(- 1/2 * t(X[i, ] - X[j,]) %*% inv.Sigma %*% (X[i, ] - X[j,]))
return(Sigma)
}
trace <- function(A) sum(diag(A))
# ------------
# I.Generate data.
# ------------
#set.seed(50)
GenerateData <-  function(K, p.beta, n, df, num.sig){
# Generate data
#
# Input:
#   K: number of pathway
#   p.beta: number of clinical variables
#   n: sample size
#   df: degree(true tau) of variance for true pathway
#   num.sig: number of signal pathways
# set the true parameters
sigma2.true = 1
p.tau = rep(20, K)
beta.true = matrix(sample(10, p.beta))
gamma.true = c(rep(0, K - num.sig), rep(1, num.sig))
tau.true = gamma.true * df;
signal.true = c(gamma.true == 1)
# generate Z(list) and X
Z = list(); for (k in 1:K) Z[[k]] = GenerateZ(p.tau[k], n, signal.true[k])
X = 3 * cos(Z[[K]]$data[, 1:p.beta]) +  rnorm(n, 0, sqrt(sigma2.true))
# generate random effects h
H.true = matrix(NA, n, K); for (k in 1:K) H.true[, k] = rmvnorm(1, mean = rep(0, n), sigma = (tau.true[k] * calcSigma(Z[[k]]$data, Z[[k]]$Omega)))
# give pathway membership and overwrite Z with z
z_P = c(); z = c()
for (k in 1:K) {
z_P = c(z_P, rep(k, p.tau[k]));
z = cbind(z, Z[[k]]$data)
}
# combine fixed and random effects
y = X%*%beta.true + apply(H.true, 1, sum) + rnorm(n, 0, sqrt(sigma2.true))
return(list(y = y, X = X, Z = z,  z_P = z_P,
sigma2.true = sigma2.true,
beta.true = beta.true,
gamma.true = gamma.true,
tau.true = tau.true))
}
# Get data
K = 10; p.beta = 2; n = 100; df = 1; num.sig = 2
dat = GenerateData(K, p.beta, n, df, num.sig)
y = dat$y
X = dat$X
Z = dat$Z
z_P = dat$z_P
# ------------
# II.1 Set options
# ------------
# set the options for VBEM
options = list();
options$maxIter = 100;
# load options
maxIter = options$maxIter
# ------------
# II.2 Set Priors
# ------------
# set the Priors for VBEM
PriorPar = list();
PriorPar$sigma2.beta = 5
PriorPar$a.sigma2 = 10
PriorPar$b.sigma2 = 10
PriorPar$a.tau = rep(10, K)
PriorPar$b.tau = rep(10, K)
# create correlation matrix
#L = matrix(0.2, K, K)
#L[!upper.tri(L)] = 0
#index = combn(which(dat$gamma.true == 1), 2)
#for (j in 1:ncol(index)) L[index[1, j], index[2, j]] = 0.8
#L = L + t(L)
#diag(L) = 1
L = matrix(0, K, K)
## define similarity function
similarity = function(xx1, xx2){
#xx1 = rnorm(100,10,2) vector
#xx2 = rnorm(100,10,2) vector
raw = abs(mean(xx1)/mean(xx2))
val = ifelse(raw < 1, raw, 1/raw)
return(val)
}
for (s in 1: (K - 1)){
for (t in (s + 1): K){
cor = rep(NA, ncol(Z[, which(z_P == s)]))
for (c in 1:length(cor)) cor[c] = similarity(Z[, which(z_P == s)][, c],
Z[, which(z_P == t)][, c])
L[s, t] = mean(cor)
}
}
L = L + t(L) + diag(K)
PriorPar$a = -1.2
PriorPar$b = L
# load the Priors
sigma2.beta = PriorPar$sigma2.beta;
a.sigma2 = PriorPar$a.sigma2;
b.sigma2 = PriorPar$b.sigma2;
a.tau = PriorPar$a.tau;
b.tau = PriorPar$b.tau;
a = PriorPar$a;
b = PriorPar$b
# ------------
# II.3 Set initial values
# ------------
# Estimation for Beta
beta.E = sample(sample(10), 2, p.beta)
# Estimation for sigma2
sigma2.E = b.sigma2/(a.sigma2 - 1)
#sigma2.V = b.sigma2^2 * 1/(a.sigma2 - 1)^2 * 1/(a.sigma2 - 2)
# Estimation for tau
tau.E = runif(K, 1, 10) #b.tau/(a.tau - 1)
tau.ln.E = rep(NA, K)
#tau.V = b.tau^2 * 1/(a.tau - 1)^2 * 1/(a.tau - 2)
# Estimation for Kernels and keep em fixed
inv.Sigma = list();
for (k in 1:K){
jgl_data = list();
jgl_data[[1]] = Z[, which(z_P == k)];
jgl_results = JGL(Y = jgl_data, penalty = "group",
lambda1 = 0.15,lambda2 = 0.2, # based on 10-fold CV
return.whole.theta = T)
inv.Sigma[[k]] = jgl_results$theta[[1]]
}
Ks = array(0, c(K, n, n));
for (k in 1:K) Ks[k, , ] =  calcSigma(Z[, which(z_P == k)], inv.Sigma[[k]])
# Estimation for H
H.E = matrix(0, n, K);
H.V = array(NA, c(K, n, n));
for (k in 1:K) {
h =  rmvnorm(1, mean = rep(0, n), sigma = tau.E[k] *Ks[k,,])
h = t(h)
H.E[ , k] = h
H.V[k, , ] = diag(n)
}
# Distribution for initial guess
par(mfrow=c(K/2, 2))
for (k in 1:K) hist(H.E[, k], xlim = range(H.E), col = "black",
xlab = "h", main = paste("Pathway",k))
apply(H.E, 2, range)
# Re-estimation for H
for (k in 1:K) H.E[ , k] = rep(0, n)
# Estimation for gamma
gamma.E = rep(0.5, K)
# Tic
ptm = proc.time();
# Perform VB
for (iter in 1:maxIter){
# Report progress of mcmc iter
if (iter %% 100 == 0){
cat("iter =", iter, "\n" )
}
# ------------------ Update clinical X ------------------
# Update Beta
beta.V = solve(1/sigma2.beta * diag(p.beta) + 1/sigma2.E * t(X)%*%X)
beta.E = 1/sigma2.E * beta.V %*% t(X) %*% (y - apply(H.E, 1, sum))
cat("beta.E = ", beta.E, "\n")
# Update sigma2
sum.h = 0
for (k in 1:K) sum.h = sum.h + t(H.E[, k])%*%H.E[, k] + trace(H.V[k, , ]) - 2 * t(H.E[, k])%*%y;
idx = combn(1:K, 2)
for (j in 1:ncol(idx)) sum.h = sum.h + 2 * t(H.E[, idx[1,j]])%*%H.E[, idx[2,j]]
sum.h = sum.h + t(y)%*%y
A =  t(X%*%beta.E)%*%X%*%beta.E + trace(X%*%beta.V%*%t(X)) - 2 * t(beta.E)%*%t(X)%*%(y - apply(H.E, 1, sum)) + sum.h
shape.sigma2 = n/2 + a.sigma2
rate.sigma2 = 1/2 * A + b.sigma2
sigma2.E = rate.sigma2/(shape.sigma2 - 1); sigma2.E = sigma2.E[1]
#sigma2.ln.E = log(rate.sigma2) - digamma(shape.sigma2); sigma2.ln.E = sigma2.ln.E[1]
cat("sigma.E = ", sigma2.E, "\n")
#cat("sigma2.ln.E = ", sigma2.ln.E, "\n")
# ------------------ Update genetic Z ------------------
for (k in 1:K) {
# Update gamma
num  = - 1/2 * 1/sigma2.E * A
col.index = setdiff(1:K, k)
sum.h = 0
for (j in col.index) sum.h = sum.h + t(H.E[, j])%*%H.E[, j] + trace(H.V[j, , ]) - 2 * t(H.E[, j])%*%y;
idx = combn(col.index, 2)
for (j in 1:ncol(idx)) sum.h = sum.h + 2 * t(H.E[, idx[1,j]])%*%H.E[, idx[2,j]]
sum.h = sum.h + t(y)%*%y
B =  t(X%*%beta.E)%*%X%*%beta.E + trace(X%*%beta.V%*%t(X)) - 2 * t(beta.E)%*%t(X)%*%(y - apply(H.E, 1, sum)) + sum.h
den = - 1/2 * 1/sigma2.E * B
#num = X%*%beta.E + apply(H.E, 1, sum)
#num = - 1/2 * 1/sigma2.E * t(y - num)%*%(y - num)
#den = X%*%beta.E + apply(data.frame(H.E[, col.index]), 1, sum)
#den = - 1/2 * 1/sigma2.E* t(y - den)%*%(y - den)
lik.odd = exp(num - den)
sigm.1 = exp(a + sum(b[k, col.index] * gamma.E[col.index]))/ (1 + sum(b[k, col.index] * gamma.E[col.index]))
sigm.0 = 1/ (1 + exp(a + sum(b[k, col.index] * gamma.E[col.index])))
prior.odd = sigm.1/sigm.0
odd = lik.odd * prior.odd
gamma.E[k] = odd/(odd + 1)
# Update tau
shape.tau = n/2 + a.tau[k]
B = t(H.E[, k])%*%solve(Ks[k, , ])%*%(H.E[ , k]) + trace(solve(Ks[k, , ])%*%H.V[k, , ])
rate.tau = 1/2 * B + b.tau[k]
tau.E[k] = rate.tau/(shape.tau - 1)
tau.E[k] = gamma.E[k] * tau.E[k] + 0
# H
col.index = setdiff(1:K, k)
V.h = solve((1/sigma2.E) * diag(n) + solve(tau.E[k] * Ks[k, , ]))
m.h = 1/sigma2.E * V.h %*% (y - X %*% beta.E - apply(data.frame(H.E[, col.index]), 1, sum))
H.E[, k] = gamma.E[k] * m.h + 0
H.V[k, , ] = gamma.E[k] * gamma.E[k] * V.h + 0
} # End for inner loop
cat("gamma.E", gamma.E, "\n")
cat("tau.E = ", tau.E, "\n")
cat("\n")
} # End of outer loop
# Tok
Time.used = proc.time() - ptm;
cat("Time used (min) = ", Time.used[3]/60, "\n")
# ------------
# IV. Evaluation
# ------------
# load true values
dat$beta.true
dat$sigma2.true
dat$gamma.true
dat$tau.true
# find estimation
beta.E
sigma2.E
gamma.E
tau.E
par(mfrow=c(2, K/2))
for (k in 1:K) hist(H.E[, k], xlim = range(H.E), col = "black",
xlab = "h", main = paste("Pathway", k))
library(ggplot2)
library(ROCR)
qplot(x = 1:K, y = dat$gamma.true, colour = "Truth", geom = "point") +
geom_point(aes(y = gamma.E, colour = "Estimation")) +
coord_cartesian(ylim = c(0, 1)) +
xlab("pathway index") +
scale_x_continuous(breaks = seq(1, K, by = 1)) +
ylab(TeX("posterior of  $\\hat{\\gamma_k}$")) +
geom_hline(yintercept = .50) +
theme(legend.title = element_blank())
pred = prediction(gamma.E, dat$gamma.true);
roc = performance(pred, "tpr", "fpr");
plot(roc, lwd = 2,  lty = 1, main = paste("Roc curve for GPSR model with independent random effects"));
lines(x = c(0, 1), y = c(0, 1), col = "black", lwd = 1, lty = 2);
round(gamma.E)
L
a  = function(x) x+2
a(2)
a  = function(x) x+2
t = a(2)
a  = function(x) return(x+2)
t = a(2)
p = 4
diag(p) * 0.001
setwd("~/Desktop")
library(devtools)
devtools::create("BMGGM")
devtools::load_all()
devtools::load_all()
setwd("~/Desktop/BMGGM")
devtools::load_all()
warnings()
library(roxygen2)
?JGL
library(formatR)
tidy_app()
any(c(1, -1) <0)
tidy_app()
#' Bayesian multiple Gaussian graphical models by MCMC.
#'
#' @param dat a list of objets:
#'     n: number of observations.
#'     p: dimension of each pathway.
#'    K: number of pathways.
#'     z_P: indicator vector of genes membership
#'     P: dimension of the data.
#' @param options a list of objets:
#' burnin: number of MCMC iterations before burnin.
#' nmc: number of MCMC iterations after burnin.
#' @param PriorPar a list of objets:
#'     a: shape1 parameter for Theta for off-digonal block.
#'     b: shape2 parameter for Theta for off-digonal block.
#'     a0: shape1 parameter for Theta for digonal block.
#'     b0: shape2 parameter for Theta for digonal block.
#'     eps: rate parameter for v0^2.
#'     delta: shape parameter for v0^2.
#'     c: the parameter for decision boundary of spike-and-slab.
#'     Theta: a K x K initial graph PPI matrix.
#' @param InitVal a list of objets:
#'     mu: intercept term.
#'    sigma2: overall noise level, same across groups.
#'     Beta: a P x P initial coefficient matrix.
#'     adj: a P x P initial adjacency matrix.
#' @return a list of objets:
#'   Beta_save: p x p x K x nmc sample of coefficient matrix
#'   adj_save: p x p x K x nmc sample of adjacency matrix
#'   Theta_save: K x K x nmc sample of graph similarity matrix
#' @export
Bmggm <- function(dat, options, PriorPar, InitVal) {
# load data
z_P <- dat$z_P
data <- dat$data
n <- dim(data)[1]
P <- dim(data)[2]
p <- P/K
# load options
burnin <- options$burnin
nmc <- options$nmc
# load priors
a <- PriorPar$a
b <- PriorPar$b
a0 <- PriorPar$a0
b0 <- PriorPar$b0
eps <- PriorPar$eps
delta <- PriorPar$delta
c <- PriorPar$c
Theta <- PriorPar$Theta
# load initials
sigma2 <- InitVal$sigma2
mu <- InitVal$mu
Beta <- InitVal$Beta
adj <- InitVal$adj
# Set up matrices for return values
Beta_save <- array(NA, c(P, P, nmc))
adj_save <- Beta_save
Theta_save <- array(0, c(K, K, nmc))
# Perform MCMC sampling
for (iter in 1:(burnin + nmc)) {
if (iter%%100 == 0) {
cat("iter =", iter, "\n")
}
for (i in 1:(P - 1)) {
col_start_index <- i + 1
col_end_index <- P
# (1) Update Beta -------------
Y <- as.matrix(data[, i])
X <- as.matrix(data[, col_start_index:col_end_index] - mu[col_start_index:col_end_index])
X <- cbind(1, X)
v0 <- rigamma(ncol(X), eps - 1, median((Beta[i, col_start_index:col_end_index]))/2 +
delta)
v0 <- sqrt(v0)
v1 <- c * v0
gamma <- c(1, adj[i, col_start_index:col_end_index])
invSigG <- diag(gamma * (1/v1^2) + (1 - gamma) * (1/v0^2),
ncol = ncol(X))
KK <- t(X) %*% X/sigma2 + invSigG
invK <- solve(KK)
MM <- (t(X) %*% Y)/sigma2
Beta[i, col_start_index:col_end_index] <- rmvnorm(n = 1, mean = invK %*%
MM, sigma = invK)[-1]
Beta[col_start_index:col_end_index, i] <- Beta[i, col_start_index:col_end_index]
mu[i] <- rmvnorm(n = 1, mean = invK %*% MM, sigma = invK)[1]
# (2) Update G -------------
prior <- Theta[z_P[i], z_P[col_start_index:col_end_index]]
v1 <- v1[-1]
v0 <- v0[-1]
log_odds_adj <- -log(v1) - Beta[i, col_start_index:col_end_index]^2/(2 *
v1^2) + log(prior) + log(v0) + Beta[i, col_start_index:col_end_index]^2/(2 *
v0^2) - log(1 - prior)
adj[i, col_start_index:col_end_index] <- ifelse(log_odds_adj >
100, 1, rbinom(ncol(X), size = 1, prob = exp(log_odds_adj)/(exp(log_odds_adj) +
1)))
adj[col_start_index:col_end_index, i] <- adj[i, col_start_index:col_end_index]
}  # END i
mu[P] <- mean(data[, P])
# (3) Update Theta -------------
for (m in 1:K) {
for (k in m:K) {
# Get terms that are a sum over all edges on log scale
sum_over_edges <- 0
sum_over_non_edges <- 0
for (i in 1:(P - 1)) {
for (j in (i + 1):P) {
if (z_P[i] == m && z_P[j] == k)
{
sum_over_edges <- sum_over_edges + adj[i, j]
sum_over_non_edges <- sum_over_non_edges + 1 -
adj[i, j]
}  # END if
}  # END j
}  # END i
Theta[m, k] <- ifelse(m == k, rbeta(1, sum_over_edges +
a0, sum_over_non_edges + b0), rbeta(1, sum_over_edges +
a, sum_over_non_edges + b))
Theta[k, m] <- Theta[m, k]
}  # End k
}  # End m
# Retain values for posterior sample ------------
if (iter > burnin) {
Beta_save[, , iter - burnin] <- Beta[, ]
adj_save[, , iter - burnin] <- adj[, ]
Theta_save[, , iter - burnin] <- Theta
}
}  # end of mcmc
return(list(Beta_save = Beta_save, adj_save = adj_save))
}
load_all()
warnings()
load_all()
load_all()
load_all()
p = 10
K = 4
n = 400
dat = GenerateData(p, K, n)
rm(list = ls())
library(mvtnorm)
library(glasso)
library(Matrix)
library(JGL)
library(pscl)
library(lattice)
library(MCMCpack)
library(MASS)
library(ROCR)
library(fifer)
library(edgebundleR)
library(igraph)
library(data.table)
require(huge)
# Data
p = 10
K = 4
n = 400
dat = GenerateData(p, K, n)
# set the options for MCMC
options = list();
options$burnin = 100;
options$nmc = 100;
# intialize the priors
PriorPar = list();
PriorPar$a = 1;
PriorPar$b = 5;
PriorPar$a0 = 1;
PriorPar$b0 = 10;
PriorPar$eps = 1e+04
PriorPar$delta = 1
PriorPar$c = 100
PriorPar$Theta = matrix(0.2, K, K);
# Initial the updates
InitVal = list();
InitVal$sigma2 = 1;
InitVal$mu = rep(0, p*K);
InitVal$Beta = matrix(runif((p*K)*(p*K)), p*K, p*K);
InitVal$adj = ifelse(InitVal$Beta, 1, 0);
# Tic
ptm = proc.time();
# Run
res = Bmggm(dat, options, PriorPar, InitVal)
adj_save = res$adj_save
Beta_save = res$Beta_save
adj_save
Time.used = proc.time() - ptm;
cat("Time used (min) = ", Time.used[3]/60, "\n")
tidy_app()
Add the packages that yours re
devtools::use_testthat()
p <- 10
K <- 4
n <- 400
dat <- GenerateData(p, K, n)
library(testthat)
?expect_true
A = dat$A
expect_true(all(eigen(A)$values > 0))
devtools::use_vignette()
devtools::use_vignette("examples")
setwd("~/Desktop/BMGGM/vignettes")
document()
document()
